diff --git a/src/PatternLab/PatternData/Rules/PseudoPatternRule.php b/src/PatternLab/PatternData/Rules/PseudoPatternRule.php
index 8575790c..8136c3c1 100755
--- a/src/PatternLab/PatternData/Rules/PseudoPatternRule.php
+++ b/src/PatternLab/PatternData/Rules/PseudoPatternRule.php
@@ -167,8 +167,19 @@ class PseudoPatternRule extends \PatternLab\PatternData\Rule {

 		}

+		/** Revert array_replace_recursive function to the original array_merge behavior (added to PL Core in July of 2016
+			* https://github.com/pattern-lab/patternlab-php-core/commit/613c7b6db41610ee858b0a6b80c9e0ffc7aab08f )
+			* NOTE: this should be treated as a temporary workaround to address the differences in behavior
+			* brought up in https://github.com/drupal-pattern-lab/patternlab-php-core/issues/12 until the ability
+			* to officially swap out or change core PL rule behavior is added
+			*
+			* 1. Changed occurrences of `array_replace_recursive` back to original `array_merge`
+			*
+			**/
+
+
 		// make sure the pattern data is an array before merging the data
-		$patternStoreData["data"] = is_array($patternData) ? array_replace_recursive($patternDataBase, $patternData) : $patternDataBase;
+		$patternStoreData["data"] = is_array($patternData) ? array_merge($patternDataBase, $patternData) : $patternDataBase; /* [1] */

 		// if the pattern data store already exists make sure it is merged and overwrites this data
     if (PatternData::checkOption($patternStoreKey)) {
@@ -177,7 +188,7 @@ class PseudoPatternRule extends \PatternLab\PatternData\Rule {
         // don't overwrite nameClean
         unset($patternStoreData['nameClean']);
       }
-      $patternStoreData = array_replace_recursive($existingData, $patternStoreData);
+      $patternStoreData = array_merge($existingData, $patternStoreData); /* [1] */
     }
 		PatternData::setOption($patternStoreKey, $patternStoreData);
