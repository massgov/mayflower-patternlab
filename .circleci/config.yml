
version: 2

# YAML anchors/aliases. See;
# - https://circleci.com/blog/circleci-hacks-reuse-yaml-in-your-circleci-config-with-yaml/
# - https://github.com/circleci/frontend/blob/master/.circleci/config.yml
references:
  common_config: &common_config
    working_directory: /var/www/code
    docker:
      # @see https://github.com/massgov/Drupal-Container
      - image: massgov/drupal-container:1.0.1-ci

jobs:
  build:
    <<: *common_config
    steps:
      - checkout
      - restore_cache:
          name: Restore NPM Cache
          keys:
            - site-npm-v1-{{ checksum "styleguide/yarn.lock" }}
            - site-npm-v1-
      - run: { name: 'NPM Install', command: 'cd styleguide && yarn' }
      - save_cache:
          name: Save NPM cache
          key: site-npm-v1-{{ checksum "styleguide/yarn.lock" }}
          paths: [ styleguide/node_modules ]
      - run: { name: 'Generate style guide', command: 'php styleguide/core/console --generate' }
      - run: { name: 'Build assets', command: 'cd styleguide && node_modules/.bin/gulp prod' }
      - persist_to_workspace:
          root: /var/www
          paths: [code]
      - store_artifacts:
          path: /var/www/code/styleguide/public/assets

  test:
    working_directory: /home/circleci/code
    docker:
      - image: circleci/python:2.7.14
    steps:
      - attach_workspace: {at: /home/circleci}
      - setup_remote_docker
      - run: docker-compose up --no-start web backstop
      - run: |
          docker cp ./ $(docker-compose ps -q backstop):/src/
          docker cp ./styleguide/public/. $(docker-compose ps -q web):/usr/share/nginx/html
      - run: docker-compose run backstop test
      - run:
          command: docker cp $(docker-compose ps -q backstop):/src/backstopjs/. ./backstopjs/
          when: always
      - store_artifacts:
          path: ./backstopjs
          destination: backstop
      - store_test_results:
          path: backstopjs/reports/ci

  deploy_artifacts:
    <<: *common_config
    steps:
      - attach_workspace: {at: /var/www}
      - run:
          name: "Prepare Git"
          command: |
            git config --global user.email "ci.bot@mass.gov"
            git config --global user.name "MassGov Bot"
      # @todo: We shouldn't need global gulp from the build scripts.
      - run: { name: 'Gulp Install', command: 'yarn global add gulp' }
      - run: { name: 'Deploy', command: 'cd styleguide && vendor/bin/phing deploy' }

  deploy_cd:
    <<: *common_config
    steps:
      - attach_workspace: {at: /var/www}
      # @todo: We shouldn't need global gulp from the build scripts.
      - run: { name: 'Gulp Install', command: 'yarn global add gulp' }
      - run: { name: 'S3 Deployment', command: 'cd styleguide && ../scripts/deploy-s3.sh -b ${CIRCLE_BRANCH}' }

workflows:
  version: 2
  build_deploy:
    jobs:
      - build
      - test:
          requires: [build]
      - deploy_artifacts:
          requires: [build]
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /\bv?(?:0|[1-9]\d*)\.(?:0|[1-9]\d*)\.(?:0|[1-9]\d*)(?:-[\da-z\-]+(?:\.[\da-z\-]+)*)?(?:\+[\da-z\-]+(?:\.[\da-z\-]+)*)?\b/
      - deploy_cd:
          requires: [build]
          filters:
            branches:
              ignore: /^master$/